__all__ = ["dataklass"]

import types
from collections.abc import Callable, Iterable
from typing import Any, TypeVar, dataclass_transform

_C = TypeVar("_C", bound=type)

def all_hints(cls: type) -> dict[str, Any]: ...
def codegen(func: Callable[[Iterable[str]], str]) -> Callable[[int], Any]: ...
def patch_args_and_attributes(
    func: types.FunctionType,
    fields: Iterable[str],
    start: int = 0,
) -> types.FunctionType: ...
def patch_attributes(func: types.FunctionType, fields: Iterable[str], start: int = 0) -> types.FunctionType: ...
def make__init__(numfields: int) -> Any: ...
def make__repr__(numfields: int) -> Any: ...
def make__eq__(numfields: int) -> Any: ...
def make__iter__(numfields: int) -> Any: ...
def make__hash__(numfields: int) -> Any: ...
@dataclass_transform()
def dataklass(cls: _C) -> _C: ...
